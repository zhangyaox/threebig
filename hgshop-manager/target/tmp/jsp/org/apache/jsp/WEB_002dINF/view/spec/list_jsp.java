/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.20.v20190813
 * Generated at: 2020-03-06 10:00:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.spec;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("file:/D:/tools/repository/org/apache/taglibs/taglibs-standard-impl/1.2.5/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1567840054114L));
    _jspx_dependants.put("jar:file:/D:/tools/repository/org/apache/taglibs/taglibs-standard-impl/1.2.5/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425949870000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<div>\r\n");
      out.write("\t<input id=\"queryName\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${queryName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("\t<button type=\"button\" class=\"btn btn-primary\" onclick=\"find()\">\r\n");
      out.write("\t\t查询\r\n");
      out.write("</button>\r\n");
      out.write("\t<button type=\"button\" class=\"btn btn-primary\" onclick=\"delBatch()\">\r\n");
      out.write("   \t批量删除</button>\r\n");
      out.write("\t<button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#staticBackdrop\">\r\n");
      out.write("\t\t添加\r\n");
      out.write("</button>\r\n");
      out.write("<!-- Modal -->\r\n");
      out.write("<div class=\"modal fade\" id=\"staticBackdrop\" data-backdrop=\"static\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n");
      out.write("  <div class=\"modal-dialog\" role=\"document\">\r\n");
      out.write("    <div class=\"modal-content\">\r\n");
      out.write("      <div class=\"modal-header\">\r\n");
      out.write("        <h5 class=\"modal-title\" id=\"staticBackdropLabel\">添加规格</h5>\r\n");
      out.write("        <button type=\"button\" onclick=\"addprop('#addspec')\">添加属性</button>\r\n");
      out.write("        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n");
      out.write("          <span aria-hidden=\"true\">&times;</span>\r\n");
      out.write("        </button>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"modal-body\">\r\n");
      out.write("        \t\t<form action=\"\" id=\"addspec\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t\t<label for=\"spec_name\">规格名称</label> <input\r\n");
      out.write("\t\t\t\t\t\t\t\ttype=\"text\" class=\"form-control\" id=\"spec_name\" name=\"spec_name\"\r\n");
      out.write("\t\t\t\t\t\t\t\taria-describedby=\"spec_nameHelp\"> <small id=\"emailHelp\"\r\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"form-text text-muted\">请输入规格名称</small>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"form-group form-group-proper\">\r\n");
      out.write("\t\t\t\t\t\t\t<label for=\"inputAddress\">属性</label> <input type=\"text\" name=\"options[0].optionName\"\r\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"form-control\" id=\"inputAddress\"\r\n");
      out.write("\t\t\t\t\t\t\t\tplaceholder=\"1234 Main St\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<button onclick=\"$(this).parent().remove()\">删除</button>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</form>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"modal-footer\">\r\n");
      out.write("        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n");
      out.write("        <button type=\"button\" class=\"btn btn-primary\" onclick=\"commitspec()\">提交</button>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("<!-- 修改模态框begin -->\r\n");
      out.write("<div class=\"modal fade\" id=\"staticBackdropupdate\" data-backdrop=\"static\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n");
      out.write("  <div class=\"modal-dialog\" role=\"document\">\r\n");
      out.write("    <div class=\"modal-content\">\r\n");
      out.write("      <div class=\"modal-header\">\r\n");
      out.write("        <h5 class=\"modal-title\" id=\"staticBackdropLabel\">修改规格</h5>\r\n");
      out.write("        <button type=\"button\" onclick=\"addprop('#updatespec')\">添加属性</button><!-- 传递form 的id下去 -->\r\n");
      out.write("        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n");
      out.write("          <span aria-hidden=\"true\">&times;</span>\r\n");
      out.write("        </button>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"modal-body\">\r\n");
      out.write("        \t\t<form action=\"\" id=\"updatespec\">\r\n");
      out.write("        \t\t\t\t<input type=\"hidden\" name=\"id\" id=\"updateid\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t\t<label for=\"spec_name\">规格名称</label> <input\r\n");
      out.write("\t\t\t\t\t\t\t\ttype=\"text\" class=\"form-control\" id=\"updatname\" name=\"spec_name\"\r\n");
      out.write("\t\t\t\t\t\t\t\taria-describedby=\"spec_nameHelp\"> <small id=\"emailHelp\"\r\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"form-text text-muted\">请输入规格名称</small>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"form-group form-group-proper\">\r\n");
      out.write("\t\t\t\t\t\t\t<label for=\"inputAddress\">属性</label> <input type=\"text\" name=\"options[0].optionName\"\r\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"form-control\" id=\"inputAddress\"\r\n");
      out.write("\t\t\t\t\t\t\t\tplaceholder=\"1234 Main St\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<button onclick=\"$(this).parent().remove()\">删除</button>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</form>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"modal-footer\">\r\n");
      out.write("        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n");
      out.write("        <button type=\"button\" class=\"btn btn-primary\" onclick=\"commitspecupdate()\">提交</button>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("<!-- 修改模态框end -->\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<table class=\"table\">\n");
      out.write("  <tr>\r\n");
      out.write("  \t<th>\r\n");
      out.write("  \t\t<button type=\"button\" class=\"btn btn-primary btn-sm\" onclick=\"selall(1)\">全选</button>\r\n");
      out.write("\t\t<button type=\"button\" class=\"btn btn-secondary btn-sm\" onclick=\"selall(2)\">全不选</button>\r\n");
      out.write("\t\t<button type=\"button\" class=\"btn btn-success btn-sm\" onclick=\"selall(3)\">反选</button>\r\n");
      out.write("  \t</th>\n");
      out.write("    <th>id</th>\n");
      out.write("    <th>名称</th>\n");
      out.write("    <th>详情</th>\n");
      out.write("  </tr>\n");
      out.write("  ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("  <tr>\r\n");
      out.write("  \t<td>\r\n");
      out.write("  \t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/page.jsp", out, false);
      out.write("<!-- 分页 -->\r\n");
      out.write("\t</td>\r\n");
      out.write("  </tr>\n");
      out.write("</table>\r\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tvar addindex=1;\r\n");
      out.write("\t// fimd 是 id   $(fimd).append('     fimd是对id相对应的模态框追加内容的\r\n");
      out.write("\tfunction addprop(fimd){\r\n");
      out.write("\t\t$(fimd).append('<div class=\"form-group form-group-proper\">'+\r\n");
      out.write("\t\t'<label for=\"inputAddress\">属性</label>'+ \r\n");
      out.write("\t\t'<input type=\"text\" name=\"options['+addindex+'].optionName\" class=\"form-control\" id=\"inputAddress\" placeholder=\"1234 Main St\">'+\r\n");
      out.write("\t\t'<button onclick=\"$(this).parent().remove()\">删除</button>'+\r\n");
      out.write("\t'</div>') \r\n");
      out.write("\taddindex++;\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction commitspec(){//添加\r\n");
      out.write("\t\tvar formData = new FormData($(\"#addspec\")[0]);\r\n");
      out.write("\t\t$.ajax({url:\"/spec/add\",\r\n");
      out.write("\t\t\t // dataType:\"json\",\r\n");
      out.write("\t\t\t  data:formData,\r\n");
      out.write("\t\t\t  // 让jQuery 不要再提交数据之前进行处理\r\n");
      out.write("\t\t\t  processData : false,\r\n");
      out.write("\t\t\t  // 提交的数据不能加消息头\r\n");
      out.write("\t\t\t  contentType : false,\r\n");
      out.write("\t\t\t  // 提交的方式 \r\n");
      out.write("\t\t\t  type:\"post\",\r\n");
      out.write("\t\t\t  // 成功后的回调函数\r\n");
      out.write("\t\t\t  success:function(data){\r\n");
      out.write("\t\t\t\t if(data==\"success\"){\r\n");
      out.write("\t\t\t\t\t alert(\"数据提交成功\");\r\n");
      out.write("\t\t\t\t\t $('#staticBackdrop').modal('hide')\r\n");
      out.write("\t\t\t\t }else{\r\n");
      out.write("\t\t\t\t\t alert(\"数据保存失败\")\r\n");
      out.write("\t\t\t\t }\r\n");
      out.write("\t\t\t\t \r\n");
      out.write("\t\t\t  }\r\n");
      out.write("\t\t\t  })\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction find(){//查找\r\n");
      out.write("\t\tvar url=\"/spec/list?name=\"+$(\"#queryName\").val();\r\n");
      out.write("\t\t$(\"#main\").load(url);\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction goPage(page){//分页\r\n");
      out.write("\t\tvar url=\"/spec/list?name=\"+$(\"#queryName\").val()+'&page='+page;\r\n");
      out.write("\t\t$(\"#main\").load(url);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction res(){//复位   删除我之前追加的对象\r\n");
      out.write("\t\t$(\".form-group-proper\").each(function(){\r\n");
      out.write("\t\t\t$(this).remove();\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\taddindex=1;\r\n");
      out.write("\t$(\"#spec_name\").val(\"\");\r\n");
      out.write("\t}\r\n");
      out.write("\t// 给模态框增加显示成成功后的事件   模态框显示成功就运行它里面的事件\r\n");
      out.write("\t$(\"#staticBackdrop\").on('shown.bs.modal',function(e){\r\n");
      out.write("\t\tres();\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("\t/**\r\n");
      out.write("\t* 刷新 而且保持查询条件和页码=====\r\n");
      out.write("\t*/\r\n");
      out.write("\tfunction refresh(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar url=\"/spec/list?name=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${queryName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"+'&page=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${info.pageNum}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("\t\t$(\"#main\").load(url);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t//模态框关闭后 调用\r\n");
      out.write("\t$(\"#staticBackdrop\").on('hidden.bs.modal',function(e){\r\n");
      out.write("\t\trefresh();\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("\tfunction delsec(id){//删除-------------------------------------------\r\n");
      out.write("\t\tif(confirm(\"确定删除数据\")){\r\n");
      out.write("\t\t\t$.post(\"/spec/delspec\",\r\n");
      out.write("\t\t\t\t\t{id:id},\r\n");
      out.write("\t\t\t\t\tfunction(data){\r\n");
      out.write("\t\t\t\t\t\tif(data==\"success\"){\r\n");
      out.write("\t\t\t\t\t\t\talert(\"成功\");\r\n");
      out.write("\t\t\t\t\t\t\trefresh();\r\n");
      out.write("\t\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t\talert(\"失败\")\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction delBatch(){//批量删除----------------------------------------------\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif($(\"[name=ids]:checked\").length<=0){\r\n");
      out.write("\t\t\talert(\"没有数据被选中，不能删除\")\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar id=$(\"[name=ids]:checked\").map(function(){\r\n");
      out.write("\t\t\treturn this.value;\r\n");
      out.write("\t\t}).get().join();\r\n");
      out.write("\t\tif(confirm(\"确定删除数据\")){\r\n");
      out.write("\t\t\t$.post(\"/spec/delspecbathch\",\r\n");
      out.write("\t\t\t\t\t{id:id},\r\n");
      out.write("\t\t\t\t\tfunction(data){\r\n");
      out.write("\t\t\t\t\t\tif(data==\"success\"){\r\n");
      out.write("\t\t\t\t\t\t\talert(\"成功\");\r\n");
      out.write("\t\t\t\t\t\t\trefresh();\r\n");
      out.write("\t\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t\talert(\"失败\")\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction selall(flag){\r\n");
      out.write("\t\tif(flag==1){\r\n");
      out.write("\t\t\t//全选\r\n");
      out.write("\t\t\t$(\"[name=ids]\").each(function(){\r\n");
      out.write("\t\t\t\t$(this).attr(\"checked\",true);\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif(flag==2){\r\n");
      out.write("\t\t\t//全不选\r\n");
      out.write("\t\t\t$(\"[name=ids]\").each(function(){\r\n");
      out.write("\t\t\t\t$(this).attr(\"checked\",false);\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif(flag==3){\r\n");
      out.write("\t\t\t$(\"[name=ids]\").map(function(){\r\n");
      out.write("\t\t\t\tthis.checked=!this.checked;\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar allselected=$(\"[name=ids]\").length==$(\"[name=ids]:checked\");\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction openUpdate(id){//修改的查找单行\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//清空数据\r\n");
      out.write("\t\t$(\".form-group-proper\").each(function(){\r\n");
      out.write("\t\t\t$(this).remove();\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\taddindex=0;\r\n");
      out.write("\t\t$(\"#updatname\").val(\"\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$.post(\"/spec/openupdate\",\r\n");
      out.write("\t\t\t\t{id:id},\r\n");
      out.write("\t\t\t\tfunction(data){\r\n");
      out.write("\t\t\t\t\t$(\"#updateid\").val(data.id);\r\n");
      out.write("\t\t\t\t\t$(\"#updatname\").val(data.spec_name);\r\n");
      out.write("\t\t\t\t\tfor ( var i in data.options) {\r\n");
      out.write("\t\t\t\t\t\t$(\"#updatespec\").append('<div class=\"form-group form-group-proper\">'+\r\n");
      out.write("\t\t\t\t\t\t\t\t'<label for=\"inputAddress\">属性</label>'+ \r\n");
      out.write("\t\t\t\t\t\t\t\t'<input type=\"hidden\" name=\"options['+addindex+'].id\" value=\"'+data.options[i].id+'\" id=\"updateid\">'+\r\n");
      out.write("\t\t\t\t\t\t\t\t'<input type=\"text\" name=\"options['+addindex+'].optionName\" value=\"'+data.options[i].optionName+'\" class=\"form-control\" id=\"inputAddress\" placeholder=\"1234 Main St\">'+\r\n");
      out.write("\t\t\t\t\t\t\t\t'<button onclick=\"$(this).parent().remove()\">删除</button>'+\r\n");
      out.write("\t\t\t\t\t\t\t'</div>') \r\n");
      out.write("\t\t\t\t\t\t\taddindex++;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t},\"json\");\r\n");
      out.write("\t\r\n");
      out.write("\t\t$(\"#staticBackdropupdate\").modal('show');//弹出模态框\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction commitspecupdate(){//修改\r\n");
      out.write("\t\tvar formData = new FormData($(\"#updatespec\")[0]);\r\n");
      out.write("\t\t$.ajax({url:\"/spec/update\",\r\n");
      out.write("\t\t\t // dataType:\"json\",\r\n");
      out.write("\t\t\t  data:formData,\r\n");
      out.write("\t\t\t  // 让jQuery 不要再提交数据之前进行处理\r\n");
      out.write("\t\t\t  processData : false,\r\n");
      out.write("\t\t\t  // 提交的数据不能加消息头\r\n");
      out.write("\t\t\t  contentType : false,\r\n");
      out.write("\t\t\t  // 提交的方式 \r\n");
      out.write("\t\t\t  type:\"post\",\r\n");
      out.write("\t\t\t  // 成功后的回调函数\r\n");
      out.write("\t\t\t  success:function(data){\r\n");
      out.write("\t\t\t\t if(data==\"success\"){\r\n");
      out.write("\t\t\t\t\t alert(\"数据修改成功\");\r\n");
      out.write("\t\t\t\t\t $('#staticBackdropupdate').modal('hide')\r\n");
      out.write("\t\t\t\t\t refresh();\r\n");
      out.write("\t\t\t\t }else{\r\n");
      out.write("\t\t\t\t\t alert(\"数据保存失败\")\r\n");
      out.write("\t\t\t\t }\r\n");
      out.write("\t\t\t\t \r\n");
      out.write("\t\t\t  }\r\n");
      out.write("\t\t\t  })\r\n");
      out.write("\t}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/view/spec/list.jsp(97,2) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/view/spec/list.jsp(97,2) '${info.list}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${info.list}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/view/spec/list.jsp(97,2) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("list");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("  \t<tr>\r\n");
            out.write("    <td><input type=\"checkbox\" name=\"ids\" value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${list.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write('>');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${list.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("    <td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${list.spec_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("    <td>\r\n");
            out.write("    \t");
            if (_jspx_meth_c_005fforEach_005f1(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("\r\n");
            out.write("    </td>\r\n");
            out.write("    <td>\r\n");
            out.write("    \t<button type=\"button\" class=\"btn btn-danger\" onclick=\"delsec(");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${list.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(")\">删除</button>\r\n");
            out.write("\t\t<button type=\"button\" class=\"btn btn-warning\" onclick=\"openUpdate(");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${list.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(")\">修改</button>\r\n");
            out.write("\t</td>\r\n");
            out.write("  </tr>\r\n");
            out.write("  ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f1_reused = false;
    try {
      _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/view/spec/list.jsp(102,5) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/view/spec/list.jsp(102,5) '${list.options}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${list.options}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/view/spec/list.jsp(102,5) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setVar("li");
      int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
        if (_jspx_eval_c_005fforEach_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("    \t\t&nbsp;&nbsp;");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${li.optionName }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\r\n");
            out.write("    \t");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
      _jspx_th_c_005fforEach_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f1_reused);
    }
    return false;
  }
}
