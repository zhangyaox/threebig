/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.20.v20190813
 * Generated at: 2020-03-06 10:00:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.cat;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<script src=\"/resource/js/jquery-3.2.1.js\"></script>    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link href=\"/resource/css/bootstrap.css\" rel=\"stylesheet\" >    \r\n");
      out.write("<link href=\"/resource/bootstrap-treeview/css/bootstrap-treeview.css\" rel=\"stylesheet\" >    \r\n");
      out.write("<script src=\"/resource/bootstrap-treeview/js/bootstrap-treeview.js\"></script>   \r\n");
      out.write("<div class=\"container-fluid\">\r\n");
      out.write("\t<div class=\"row\">\r\n");
      out.write("\t\t<div class=\"col-sm-6\" id=\"cattree\">\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"col-sm-6\" id=\"edit\">\r\n");
      out.write("\t\t\t<!-- 用于添加的  开始  -->\r\n");
      out.write("\t\t\t<form   action=\"\">\r\n");
      out.write("\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("    \t\t\t\t<label for=\"\">上一级别的id</label>\r\n");
      out.write("    \t\t\t\t<input type=\"text\" class=\"form-control\" id=\"parentId\" placeholder=\"节点名称\">\r\n");
      out.write("  \t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t<div class=\"form-group\">\r\n");
      out.write("    \t\t\t\t<label for=\"\">上一级别的名称</label>\r\n");
      out.write("    \t\t\t\t<input type=\"text\" class=\"form-control\" id=\"parentName\" placeholder=\"节点名称\">\r\n");
      out.write("  \t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t<div class=\"form-group\">\r\n");
      out.write("    \t\t\t\t<label for=\"\">名称</label>\r\n");
      out.write("    \t\t\t\t<input type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"节点名称\">\r\n");
      out.write("  \t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t<button type=\"button\" class=\"btn btn-primary\" onclick=\"add()\">添加</button>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t\t<!-- 结束    用于添加 -->\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<!-- 开始    用于修改 and 删除-->\r\n");
      out.write("\t\t\t<form   action=\"\">\r\n");
      out.write("\t\t\t\t<input id=\"currentChildLenth\" value=\"0\" type=\"hidden\">\r\n");
      out.write("\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("    \t\t\t\t<label for=\"\">当前的id</label>\r\n");
      out.write("    \t\t\t\t<input type=\"text\" class=\"form-control\" id=\"currentId\" placeholder=\"节点名称\">\r\n");
      out.write("  \t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t<div class=\"form-group\">\r\n");
      out.write("    \t\t\t\t<label for=\"\">当前名称</label>\r\n");
      out.write("    \t\t\t\t<input type=\"text\" class=\"form-control\" id=\"currentName\" placeholder=\"节点名称\">\r\n");
      out.write("  \t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t<button type=\"button\" class=\"btn btn-danger\" onclick=\"del()\">删除</button>\r\n");
      out.write("  \t\t\t\t<button type=\"button\" class=\"btn btn-primary\" onclick=\"update()\">修改</button>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t\t<!-- 结束    用于修改 and 删除-->\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("function initTree() {\r\n");
      out.write("\t//发送ajax获取树需要的数据\r\n");
      out.write("\t$.post(\"/cat/treedata\", {},\r\n");
      out.write("\t\t\tfunction(treeData) {\r\n");
      out.write("\t\t\t\t//初始化添加的时候分类的树\r\n");
      out.write("\t\t\t\t$(\"#cattree\").treeview({\r\n");
      out.write("\t\t\t\t\tdata : treeData,\r\n");
      out.write("\t\t\t\t\tlevels : 2,\r\n");
      out.write("\t\t\t\t\tonNodeSelected : function(event, node) {\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t//添加 复值\r\n");
      out.write("\t\t\t\t\t\t\t$(\"#parentId\").val(node.id);\r\n");
      out.write("\t\t\t\t\t\t\t$(\"#parentName\").val(node.text);\r\n");
      out.write("\t\t\t\t\t\t\t$(\"#name\").val(\"\");//添加end\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t// 给预备修改的地方赋值\r\n");
      out.write("\t\t\t\t\t\t\t$(\"#currentId\").val(node.id);\r\n");
      out.write("\t\t\t\t\t\t\t$(\"#currentName\").val(node.text);\r\n");
      out.write("\t\t\t\t\t\t\t//删除的    按长度来判断是否是末一个\r\n");
      out.write("\t\t\t\t\t\t\t$(\"#currentChildLenth\").val(node.nodes.length)\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t}, \"json\");\r\n");
      out.write("}\r\n");
      out.write("initTree();\r\n");
      out.write("\r\n");
      out.write("//更新\r\n");
      out.write("function refresh(){\r\n");
      out.write("\t$(\"#main\").load(\"/cat/list\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function add(){\r\n");
      out.write("\t$.post(\"/cat/add\",\r\n");
      out.write("\t\t\t{id:$(\"#parentId\").val(),name:$(\"#name\").val()},\r\n");
      out.write("\t\t\tfunction(data){\r\n");
      out.write("\t\t\t\t\tif(data==\"success\"){\r\n");
      out.write("\t\t\t\t\t\talert(\"添加成功\");\r\n");
      out.write("\t\t\t\t\t\trefresh();\r\n");
      out.write("\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\talert(\"添加失败\")\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t})\r\n");
      out.write("}\r\n");
      out.write("function del(){\r\n");
      out.write("\tif($(\"#currentChildLenth\").val()>0){\r\n");
      out.write("\t\talert(\"不可以删除，该节点还有子节点\");\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}else{\r\n");
      out.write("\t\t$.post(\"/cat/del\",\r\n");
      out.write("\t\t\t\t{id:$(\"#currentId\").val()},\r\n");
      out.write("\t\t\t\tfunction(data){\r\n");
      out.write("\t\t\t\t\t\tif(data==\"success\"){\r\n");
      out.write("\t\t\t\t\t\t\talert(\"删除成功\");\r\n");
      out.write("\t\t\t\t\t\t\trefresh();\r\n");
      out.write("\t\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t\talert(\"删除失败\")\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("function update(){\r\n");
      out.write("\t$.post(\"/cat/upd\",\r\n");
      out.write("\t\t\t{id:$(\"#currentId\").val(),name:$(\"#currentName\").val()},\r\n");
      out.write("\t\t\tfunction(data){\r\n");
      out.write("\t\t\t\t\tif(data==\"success\"){\r\n");
      out.write("\t\t\t\t\t\talert(\"修改成功\");\r\n");
      out.write("\t\t\t\t\t\trefresh();\r\n");
      out.write("\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\talert(\"修改失败\")\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t})\r\n");
      out.write("}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
